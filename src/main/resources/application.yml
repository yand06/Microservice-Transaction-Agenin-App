spring:
  application:
    name: AGENIN_TRANSACTION
    version: 1.0.0
  banner:
    location: classpath:/banner-text.txt
  dataSource:
    url: jdbc:postgresql://${AGENIN_DB_HOST}:${AGENIN_DB_PORT}/${AGENIN_DB_NAME}
    username: ${AGENIN_DB_USERNAME}
    password: ${AGENIN_DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        globally_quoted_identifiers: true
        format_sql: true
        show_sql: false
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: none

  #KAFKA CONFIGURATION
  kafka:
    bootstrap-servers: ${AGENIN_BOOTSTRAP_KFK_SERVER}
    consumer:
      acks: all
      retries: 10
      enable-auto-commit: true
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        delivery.timeout.ms: 120000
        linger.ms: 10
        compression.type: lz4
        batch.size: 32768
        spring.json.add.type.headers: false
        spring:
          deserializer:
            key:
              delegate:
                class: org.springframework.kafka.common.serialization.StringDeserializer
            value:
              delegate:
                class: org.springframework.kafka.common.serialization.StringDeserializer
          #KAFKA TRUSTED PACKAGES FOR JSON DESERIALIZATION AND DEFAULT VALUE TYPE
          json:
            trusted:
              packages: "*"
            value:
              default-type: com.jdt16.agenin.transaction.dto.response.RestApiResponse

  #   Redis Configuration
  data:
    redis:
      host: ${AGENIN_REDIS_HOST}
      port: ${AGENIN_REDIS_PORT}
      password: ${AGENIN_REDIS_PASSWORD}
      timeout: 60000

  #   Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false
#LOGGING
logging:
  level:
    org:
      springframework:
        kafka: INFO
        listener:
          container: INFO
      apache:
        kafka: INFO
        clients:
          consumer: INFO
#REQUEST TOPIC
request-topic:
  create-transaction-topic: create-transaction-po
  create-log-topic: create-log-po
#request-reply-topic:
#  create-transaction-topic: create-transaction-co
#  create-log-topic: create-log-co
#KAFKA
connector:
  environment: ${AGENIN_CONNECTOR_KFK_ENV}
kafka:
  bootstrap-servers: ${AGENIN_BOOTSTRAP_KFK_SERVER}
  consumer-group: ${AGENIN_CONSUMER_GROUP}

server:
  port: 8282